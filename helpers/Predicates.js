sap.ui.define([],function(){"use strict";const e=StellarSdk.Claimant;const t=StellarSdk.Horizon;const i=StellarSdk.xdr;const r={predicateFromHorizonResponse:t=>{let i=e.predicateUnconditional();if(t.abs_before)i=e.predicateBeforeAbsoluteTime(new BigNumber(Date.parse(t.abs_before)).idiv(1e3).toString());if(t.rel_before)i=e.predicateBeforeRelativeTime(t.rel_before);if(t.and)i=e.predicateAnd(r.predicateFromHorizonResponse(t.and[0]),r.predicateFromHorizonResponse(t.and[1]));if(t.or)i=e.predicateOr(r.predicateFromHorizonResponse(t.or[0]),r.predicateFromHorizonResponse(t.or[1]));if(t.not)i=e.predicateNot(r.predicateFromHorizonResponse(t.not));return i},isPredicateClaimableAt:(e,t=new Date)=>{const a=new BigNumber(t.getTime()).idiv(1e3).toNumber();switch(e.switch()){case i.ClaimPredicateType.claimPredicateUnconditional():return true;case i.ClaimPredicateType.claimPredicateAnd():return r.isPredicateClaimableAt(e.andPredicates()[0],t)&&r.isPredicateClaimableAt(e.andPredicates()[1],t);case i.ClaimPredicateType.claimPredicateOr():return r.isPredicateClaimableAt(e.orPredicates()[0],t)||r.isPredicateClaimableAt(e.orPredicates()[1],t);case i.ClaimPredicateType.claimPredicateNot():return!r.isPredicateClaimableAt(e.notPredicate(),t);case i.ClaimPredicateType.claimPredicateBeforeAbsoluteTime():return new BigNumber(e.absBefore().toString()).isGreaterThan(a);case i.ClaimPredicateType.claimPredicateBeforeRelativeTime():const c=new BigNumber(e.relBefore()).plus(new BigNumber(Date.now()).idiv(1e3));return c.isGreaterThan(a)}return true},flattenPredicate:(t,a=new Date)=>{const c=new BigNumber(a.getTime()).idiv(1e3).toNumber();switch(t.switch()){case i.ClaimPredicateType.claimPredicateUnconditional():break;case i.ClaimPredicateType.claimPredicateNot():return i.ClaimPredicate.claimPredicateNot(r.flattenPredicate(t.notPredicate()));case i.ClaimPredicateType.claimPredicateBeforeAbsoluteTime():return t;case i.ClaimPredicateType.claimPredicateBeforeRelativeTime():return r.flattenPredicate(e.predicateBeforeAbsoluteTime(new BigNumber(t.relBefore()).plus(c).toString()),a);case i.ClaimPredicateType.claimPredicateOr():return r.flattenPredicateOr(t,a);case i.ClaimPredicateType.claimPredicateAnd():return r.flattenPredicateAnd(t,a)}return i.ClaimPredicate.claimPredicateUnconditional()},flattenPredicateAnd:(t,i)=>{const a=t.andPredicates().map(e=>r.flattenPredicate(e,i));const c=a.filter(e=>r.isPredicateClaimableAt(e,i));if(c.length===0){let t=r.getLatestBeforeAbsolutePredicate(a.filter(isAbsBeforePredicate));if(!t)t=r.getEarliestNotBeforeAbsolutePredicate(a.filter(isNotPredicate));if(!t)e.predicateNot(e.predicateUnconditional());return t}else if(c.length===1){return a.find(e=>!r.isPredicateClaimableAt(e))}else{const t=a.filter(isAbsBeforePredicate);const i=a.filter(isNotPredicate);if(c.find(isUnconditionalPredicate)||i.length===2||t.length===2){let a=r.getEarliestBeforeAbsolutePredicate(t);if(!a)a=r.getLatestNotBeforeAbsolutePredicate(i);if(!a)a=e.predicateUnconditional();return a}}return t},flattenPredicateOr:(t,i)=>{const a=t.orPredicates().map(e=>r.flattenPredicate(e,i));if(a.find(isUnconditionalPredicate)){return e.predicateUnconditional()}const c=a.filter(e=>r.isPredicateClaimableAt(e,i));if(c.length===0){let t=r.getLatestNotBeforeAbsolutePredicate(a.filter(isNotPredicate));if(!t)t=r.getLatestBeforeAbsolutePredicate(a.filter(isAbsBeforePredicate));if(!t)t=e.predicateOr(...a);return t}else if(c.length===1){return c[0]}else{let e=r.getLatestBeforeAbsolutePredicate(c);if(!e)e=r.getEarliestNotBeforeAbsolutePredicate(c);if(e)return e}return e.predicateUnconditional()},isUnconditionalPredicate:e=>{if(e.switch)return e.switch()===i.ClaimPredicateType.claimPredicateUnconditional()},isAbsBeforePredicate:e=>{if(e.switch)return e.switch()===i.ClaimPredicateType.claimPredicateBeforeAbsoluteTime()},isNotPredicate:e=>{if(e.switch)return e.switch()===i.ClaimPredicateType.claimPredicateNot()},predicatesAreTheSameType:e=>e.map(e=>e.switch()).filter((e,t,i)=>i.indexOf(e)===t).length===1,getLatestBeforeAbsolutePredicate:t=>{if(r.predicatesAreTheSameType(t)){if(r.isAbsBeforePredicate(t[0])){return e.predicateBeforeAbsoluteTime(t.map(e=>e.value()).filter(e=>e instanceof i.Int64).reduce((e,t)=>Math.max(e,t),0).toString())}}},getLatestNotBeforeAbsolutePredicate:t=>{if(r.predicatesAreTheSameType(t)){if(r.isNotPredicate(t[0])){return e.predicateNot(e.predicateBeforeAbsoluteTime(t.map(e=>e.notPredicate().value()).filter(e=>e instanceof i.Int64).reduce((e,t)=>Math.max(e,t),0).toString()))}}},getEarliestBeforeAbsolutePredicate:t=>{if(r.predicatesAreTheSameType(t)){if(r.isAbsBeforePredicate(t[0])){return e.predicateBeforeAbsoluteTime(t.map(e=>e.value()).filter(e=>e instanceof i.Int64).reduce((e,t)=>Math.min(e,t),Number.POSITIVE_INFINITY).toString())}}},getEarliestNotBeforeAbsolutePredicate:t=>{if(r.predicatesAreTheSameType(t)){if(r.isNotPredicate(t[0])){return e.predicateNot(e.predicateBeforeAbsoluteTime(t.map(e=>e.notPredicate().value()).filter(e=>e instanceof i.Int64).reduce((e,t)=>Math.min(e,t),Number.POSITIVE_INFINITY).toString()))}}},getPredicateInformation:(e,t)=>{const a=r.flattenPredicate(e,t);const c={predicate:a,validFrom:undefined,validTo:undefined};const o=e=>r.isAbsBeforePredicate(e)?new BigNumber(e.absBefore()).toNumber():undefined;const d=e=>r.isNotPredicate(e)&&r.isAbsBeforePredicate(e.notPredicate())?new BigNumber(e.notPredicate().value()).toNumber():undefined;const n=e=>({validFrom:d(e),validTo:o(e)});const l=r.isPredicateClaimableAt(a,t);const{validFrom:s,validTo:f}=n(a);if(l){c.status="claimable";if(a.switch()===i.ClaimPredicateType.claimPredicateAnd()){let e=a.andPredicates().map(n).reduce((e,t)=>{let i=t.validFrom;if(!i)i=e.validFrom;let r=t.validTo;if(!r)r=e.validTo;return{validFrom:i,validTo:r}},{});c.validFrom=e.validFrom;c.validTo=e.validTo}else{c.validFrom=s;c.validTo=f}}else{if(f){c.validTo=f;c.status="expired"}else if(s){c.validFrom=s;c.status="upcoming"}}return c}};return r});
//# sourceMappingURL=Predicates.js.map